generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  createdAt     DateTime  @default(now()) 
  updatedAt     DateTime  @default(now())
  accounts      Account[]

  upvotes String
  posts   String
  words   Word[]
  Comment Comment[]

  @@map(name: "users")
}

model Word {
  id            Int       @id @default(autoincrement())
  User          User?     @relation(fields: [userId], references: [id])
  userId        Int
  word          String
  description   String
  upvotes       String
  downvotes     String
  commentscount String
  comments      Comment[]
}

model Comment {
  id        Int    @id @default(autoincrement())
  upvotes   String
  downvotes String

  Word   Word? @relation(fields: [wordId], references: [id])
  wordId Int

  User   User?   @relation(fields: [userId], references: [id])
  userId Int?
}
